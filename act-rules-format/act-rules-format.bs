<pre class='metadata'>
Title: Accessibility Conformance Testing (ACT) Rules Format 1.1
Shortname: act-rules-format
ED: https://w3c.github.io/wcag-act/act-rules-format.html
TR: https://www.w3.org/TR/act-rules-format/
Previous Version: https://www.w3.org/TR/act-rules-format-1.0/
Level: 1.1
Prepare For TR: yes
Status: ED
Status Text:
Deadline: 2024-08-18
Group: act-rules-format
Editor: Wilco Fiers, Deque Systems, w3cid 43334
Editor: Kathy Eng, US Access Board, w3cid 107871
Editor: Trevor Bostic, MITRE Corp., w3cid 105887
Editor: Daniel Montalvo, W3C, w3cid 114058
Former Editor: Maureen Kraft, IBM Corp.
Former Editor: Mary Jo Mueller, IBM Corp.
Former Editor: Shadi Abou-Zahra, W3C
Abstract:     The Accessibility Conformance Testing (ACT) Rules Format 1.1 defines a format for writing accessibility test rules. These test rules can be used for developing automated testing tools and manual testing methodologies. It provides a common format that allows any party involved in accessibility testing to document and share their testing procedures in a robust and understandable manner. This enables transparency and harmonization of testing methods, including methods implemented by accessibility test tools.
Markup Shorthands: markdown yes
Local Boilerplate: abstract yes, status yes, copyright yes
</pre>

<style>
  .rfc2119 {
    text-transform: uppercase;
  }
  pre.highlight {
    background: white !important;
    border: solid 1px #ded390;
    border-radius: 2px;
  }
  pre.highlight c-[s],
  pre.highlight c-[u] {
    color: #79532e;
  }
  pre.highlight c-[f] {
    color: #578201;
  }
  pre.highlight c-[p] {
    color: #757575;
  }
</style>

Introduction {#intro}
=====================

There are currently many test procedures and tools available which aid their users in testing web content for conformance to accessibility standards such as the [Web Content Accessibility Guidelines](https://www.w3.org/WAI/standards-guidelines/wcag/) [[WCAG22]]. As the Web develops in both size and complexity, these procedures and tools are essential for managing the accessibility of resources available on the Web.

This format is intended to enable a consistent interpretation of how to test conformance to WCAG and other [=accessibility requirements documents=] and promote consistent results in accessibility testing. The rules format is designed to describe both manual accessibility tests, as well as automated tests as performed by accessibility testing tools.

Documenting how to test [=accessibility requirements=] will result in accessibility tests that are transparent, with test results that are reproducible. The Accessibility Conformance Testing (ACT) Rules Format defines the requirements for these test descriptions, known as Accessibility Conformance Testing Rules (ACT Rules).

An ACT Rule is a plain language description of how to test a specific type of content for a specific aspect of an accessibility requirement. An ACT Rule describes what kind of content it applies to and which conditions are true about the applicable elements for them to meet all expectations of the rule. In the context of WCAG, ACT Rules test for failures in satisfying Success Criteria. Such failures are often described in [common failures](https://www.w3.org/TR/WCAG22/#wcag-2-layers-of-guidance) documented for WCAG. ACT Rules are written for the testing process and are usually more specific than common failures.

The ACT Rules Format defines the requirements and rule structure for the types of information each rule needs to include to be called an ACT Rule. The structure of the ACT rule is defined in the [ACT Rule Structure](#act-rule-structure) section. Each ACT Rule also contains a plain language description of the type of content under test, the test to perform, and the expected result.  Where the test result affects conformance, the rule documents the particular requirement being tested. The resulting outcomes from the test can be used to help determine conformance or non-conformance to the requirement. Test cases are also written as part of the ACT rule to provide a way to verify that implementations of the rule can successfully determine the expected outcomes.


Scope {#scope}
==============

The ACT Rules Format defined in this specification is designed for rules that can be used in testing content created using web technologies, such as [Hypertext Markup Language](https://www.w3.org/TR/html/) [[HTML]], [Cascading Style Sheets](https://www.w3.org/TR/CSS/) [[css-2018]], [Accessible Rich Internet Applications](https://www.w3.org/WAI/standards-guidelines/aria/) [[WAI-ARIA]], [Scalable Vector Graphics](https://www.w3.org/TR/SVG/) [[SVG2]], [EPUB 3](httpss://www.idpf.org/) [[epub-33]], and more. The ACT Rules Format is designed to be technology agnostic, meaning that it can conceivably be used to describe test rules for other technologies.

The ACT Rules Format can be used to describe ACT Rules dedicated to testing the [=accessibility requirements=] defined in the Web Content Accessibility Guidelines [[WCAG22]], which are specifically designed for web content. Other accessibility requirements applicable to web technologies can also be testable with ACT Rules. For example, ACT Rules could be developed to test the conformance of web-based user agents to the [User Agent Accessibility Guidelines](https://www.w3.org/WAI/standards-guidelines/uaag/) [[UAAG20]]. The ACT Rules Format might not always be suitable to describe tests for other types of accessibility requirements.


ACT Rule Types {#rule-types}
============================

In accessibility, there are often different technical solutions to make the same type of content accessible. For example, there are multiple methods for giving an `img` element in HTML an accessible name. Multiple solutions could be tested in a single rule; however, such a rule tends to be quite complex, making it difficult to understand and maintain. The ACT Rules Format solves this by providing two types of rules:

- <dfn>Atomic rules</dfn> describe how to test a specific type of solution. It contains a precise definition of what elements, nodes or other "parts" of a [=test subject=] are to be tested, and when those test targets are considered to pass or fail the rule. These rules are to be kept small and *atomic*. This means that atomic rules test a single "condition" and do so without using the [=outcomes=] from other rules.

- <dfn>Composite rules</dfn> describe how the [=outcomes=] of multiple [=atomic rules=] can be combined into a single outcome for each [=test target=]. A composite rule can have multiple "conditions", each of these tested in a separate atomic rule. The logic in the composite rule describes how any one of these satisfying conditions, or some combination of them, is used to determine a single outcome.

Composite rules cannot contain other composite rules. Any time a nested composite rule would be needed, all of the relevant atomic rules can be combined directly into the new composite rule.

<aside class="example">
  <header>Example of using multiple input rules in a composite rule:</header>
  <blockquote><p>Each HTML `video` element meets all expectations from at least one of the following rules:</p>
  <ul>
    <li>Video elements have a transcript</li>
    <li>Video elements have an audio description</li>
    <li>Video elements have a description track</li>
  </ul></blockquote>
</aside>

Not all atomic rules have to be part of a composite rule. Composite rules are used when the [=outcomes=] of multiple atomic rules need to be combined to determine if a [=test subject=] does not satisfy an [=accessibility requirement=].

The separation between atomic rules and composite rules creates a division of responsibilities. Atomic rules test if web content is correctly implemented in a particular solution. Composite rules can test if a combination of [=outcomes=] from other atomic rules satisfy the accessibility requirement, in part or as a whole.


ACT Rule Structure {#act-rule-structure}
===============================

An ACT Rule <em class="rfc2119">must</em> consist of at least the following items:

* <dfn>Descriptive Title</dfn>
* [Rule Identifier](#rule-identifier)
* [Rule Description](#rule-description)
* [Rule Type](#rule-type)
* [Accessibility Requirements Mapping](#accessibility-requirements-mapping)
* [Rule Input](#input), which is one of the following:
    * [Input Aspects](#input-aspects) (for atomic rules) OR
    * [Input Rules](#input-rules) (for composite rules)
* [Applicability](#applicability)
* [Expectations](#expectations)
* [Background](#background)
    * [Assumptions](#assumptions)
    * [Accessibility Support](#accessibility-support)
    * [Related Rules (optional)](#related-rules)
    * [Other Resources (optional)](#other-resources)
* [Test Cases](#test-cases)
* [Rule Versions](#rule-versions)
* [ACT Rules Format Version](#act-rules-format-version)
* [Glossary](#glossary)

An ACT Rule MAY also contain:

* [Related Rules](#related-rules) (optional) under Background
* [Other Resources](#other-resources) (optional) under Background
* [Issues List](#issues-list) (optional)
* [Implementations](#implementations) (optional)
* [Acknowledgments](#acknowledgments) (optional)

The ACT Rules format does not prescribe what format ACT Rules can be written in (e.g. HTML, DOCX, PDF, etc.). However, ACT Rules <em class="rfc2119">must</em> be written in a document that conforms to the Web Content Accessibility Guidelines [[WCAG22]] or a comparable accessibility standard. This ensures that ACT Rules are accessible to people with disabilities. ACT Rule [test cases](#test-cases) are allowed to contain inaccessible content. If any test case contains accessibility issues listed in [WCAG 2.2 Section 5.2.5 Non-Interference](https://www.w3.org/TR/WCAG22/#cc5), users <em class="rfc2119">must</em> be warned of this in advance. In addition to supporting people with disabilities, using an accessible format also makes internationalization of ACT Rules easier.


Rule Identifier {#rule-identifier}
----------------------------------

An ACT Rule <em class="rfc2119">must</em> have an identifier. This identifier <em class="rfc2119">must</em> be unique when the rule is part of a ruleset. The identifier can be any text, such as plain text, URL, or a database identifier.

<aside class=example>
  <header>Example of identifiers that are also used as filenames; They include a technology directory, followed by a handle that includes an element name or attribute:</header>
  <blockquote><ul>
    <li>html+svg/video-alternative</li>
    <li>html+svg/meta-no-refresh</li>
    <li>html+svg/unique-id</li>
  </ul></blockquote>
</aside>

In addition to the identifier, each new release of an ACT Rule <em class="rfc2119">must</em> be versioned with either a date or a number. A reference to the previous version of that rule <em class="rfc2119">must</em> be available. The identifier <em class="rfc2119">must not</em> be changed when the rule is updated. For substantial changes, a new rule <em class="rfc2119">should</em> be created with a new identifier, and the old rule <em class="rfc2119">should</em> be deprecated.

<aside class=example>
  <header>Example situation of updating a rule:</header>
  <blockquote><p>When updating a rule that is about buttons, to now also be about links, menu items and tabs, the buttons rule is deprecated. As a replacement, a new rule is created that is applicable to all those elements.</p></blockquote>
</aside>


Rule Description {#rule-description}
------------------------------------

An ACT Rule <em class="rfc2119">must</em> have a description that is in plain language which provides a brief explanation of what the rule does.

<aside class=example>
  <header>Example of a rule description:</header>
  <blockquote><p>This rule checks that the HTML page has a title</p></blockquote>
</aside>


Rule Type {#rule-type}
------------------------------------

An ACT Rule <em class="rfc2119">must</em> have a rule type which is one of the following:
<ul>
  <li>Atomic rule</li>
  <li>Composite rule</li>
</ul>

Refer to the [Rule Type](#rule-types) section for detailed definitions of the rule types.


Accessibility Requirements Mapping {#accessibility-requirements-mapping}
------------------------------------------------------------------------

When an ACT Rule is designed to test conformance to one or more [=Accessibility requirements documents=], the rule <em class="rfc2119">must</em> list all [=accessibility requirements=] from those documents that are not satisfied when one or more of the [=outcomes=] of the rule is `failed`. The rule <em class="rfc2119">may</em> list accessibility requirements that could be not satisfied when the rule outcome is failed. There are two types of accessibility requirements:
- [Conformance Requirements](#conformance-requirements)
- [Secondary Requirements](#secondary-requirements)

Each [=accessibility requirement=] in the mapping <em class="rfc2119">must</em> include the following:

1. either the name, title, identifier or summary of the accessibility requirement, and
2. the name of the [=accessibility requirements document=], and
3. a link or reference to the [=accessibility requirements document=] if one exists, and
4. the conformance level associated with the accessibility requirement, if one exists, and
5. whether the requirement is a conformance requirement or a secondary requirement.

### Outcome Mapping ### {#outcome-mapping}
For each conformance requirement in the mapping, an ACT Rule <em class="rfc2119">must</em> indicate what the [=outcomes=] of the rule mean for satisfying an accessibility requirement for that [=test subject=]. 

#### <dfn>Conformance Requirements</dfn> #### {#conformance-requirements}

When a rule is designed to test a specific accessibility requirement, the accessibility requirement is mapped as a Conformance Requirement when both of the following conditions are true: 

- Failed Outcomes: When one or more of the outcomes for a test subject is `failed`, the accessibility requirement is <dfn>not satisfied</dfn> for the test subject, and 
- Passed or Inapplicable Outcomes: When all of the outcomes are `passed` or `inapplicable` for a test subject, the accessibility requirement could be <dfn>satisfied</dfn> or <dfn>further testing is needed</dfn> for the test subject.
 
Rules that can be used to determine if an accessibility requirement is *satisfied* are called <dfn>satisfying tests</dfn>.

- Passed: When all of the outcomes are `passed`, the accessibility requirement is [=satisfied=] for the test subject.

<div class=note>
  <p>**Note:** In the [Web Content Accessibility Guidelines](https://www.w3.org/WAI/standards-guidelines/wcag/) [[WCAG22]], success criteria do not evaluate to `passed`, `failed` or `inapplicable`. Rather they can be *satisfied* (or not). (See the [WCAG 2.2 definition: satisfies a success criterion](https://www.w3.org/TR/WCAG22/#dfn-satisfies).) If a success criterion is *not satisfied*, a web page can only conform if there is a conforming alternative version, as described in [WCAG 2.2 Conformance Requirement 1](https://www.w3.org/TR/WCAG22/#cc1).</p>
</div>

<aside class=example>
  <header>Example accessibility requirements mapping for a rule that was designed to test if an image button has an accessible name maps success criteria 1.1.1 Non-text content and 4.1.2 Name, Role, Value as conformance requirements:</header>
  <blockquote><ul>
    <li>
      [Success criterion 1.1.1: Non-text content](https://www.w3.org/TR/WCAG22/#non-text-content)
      <ul>
        <li>**Required for conformance** to WCAG 2.0, 2.1, and 2.2 level A and higher</li>
        <li>Outcome mapping: <ul>
          <li>Any `failed` outcomes: not satisfied</li>
          <li>All `passed` outcomes: further testing is needed</li>
          <li>An `inapplicable` outcome: further testing is needed</li>
        </ul></li>
      </ul>
    </li>
    <li>
      [Success criterion 4.1.2: Name, Role, Value](https://www.w3.org/TR/WCAG22/#name-role-value)
      <ul>
        <li>**Required for conformance** to WCAG 2.0, 2.1, and 2.2 level A and higher</li>
        <li>Outcome mapping:<ul>
          <li>Any `failed` outcomes: not satisfied</li>
          <li>All `passed` outcomes: further testing is needed</li>
          <li>An `inapplicable` outcome: further testing is needed</li>
        </ul></li>
      </ul>
    </li>
  </ul></blockquote>
</aside>

#### <dfn>Secondary Requirements</dfn> #### {#secondary-requirements}

A secondary accessibility requirement is a requirement that is correlated with the rule, but for which the rule is not designed to test. The outcome of the rule impacts the result of the accessibility requirement, but the rule is not intended to test the conformance of that requirement. This correlation often results in some of the rule's test cases not satisfying the secondary accessibility requirement.

When the rule is not designed to test the accessibility requirement, or failed outcomes of the rule still require further testing for the accessibility requirement, the rule <em class="rfc2119">may</em> map the accessibility requirement as Secondary. When an ACT rule maps to a Secondary requirement, it <em class="rfc2119">must</em> include an explanation of why that requirement is Secondary in the Background section of the rule.

When the rule is designed to test an accessibility requirement, differences in [accessibility support](#accessibility-support) <em class="rfc2119">must not</em> be a reason for that requirement to be a secondary accessibility requirement. 

Some scenarios when a rule will have Secondary requirements include:

**Scenario 1**: the rule is not as strict as a requirement

A rule was designed to test a minimum accessibility requirement and there exists a stricter requirement. The rule’s failed outcomes can determine that the stricter accessibility requirement is not satisfied, and the rule’s passed outcomes may not determine that the stricter requirement is satisfied. It is possible that the accessibility requirement may be not satisfied when the rule's outcomes are passed. The stricter requirement is a Secondary requirement.

<aside class=example>
  <header>Example: a rule that tests if text has minimum contrast</header>
<blockquote>This rule was designed to test Success Criterion 1.4.3 Contrast Minimum (AA). A stricter requirement, Success Criterion 1.4.6 Contrast (Enhanced) (Level AAA), will be not satisfied when the rule outcome is failed, and may be not satisfied when the rule outcomes are passed. This rule’s mapping:
<ul>
<li>Conformance Requirement: Success Criterion 1.4.3 Contrast (Minimum)</li>
<li>Secondary Requirement: Success Criterion 1.4.6 Contrast (Enhanced)</li>
  <ul><li>Explanation: This success criterion is **more strict** than this rule. This is because this criterion has a higher minimum contrast. Some of the passed examples do not satisfy this success criterion.</li></ul>
</ul>
</blockquote>
</aside>

**Scenario 2**: the rule is stricter than a requirement

A rule was designed to test a specific solution for an accessibility requirement, but the requirement can be satisfied by other solutions that are not included in the rule. In this scenario, the rule’s failed outcomes cannot determine that an accessibility requirement is not satisfied because further testing is needed. The rule’s passed outcomes can determine that an accessibility requirement is satisfied. The accessibility requirement is a secondary requirement.

  <aside class=example>
    <header>Example: a rule that tests if a focusable element has no keyboard trap via standard navigation</header>
       <blockquote>This rule was designed to test for a specific solution that can be used to meet Success Criterion 2.1.2: No Keyboard Trap. The rule does not test for the use of other possible solutions, such as non-standard navigation, that can satisfy the success criterion. Its failed outcomes cannot determine that the accessibility requirement is [=not satisfied=]. This rule’s mapping:
<ul>
<li>Secondary Requirement: Success Criterion 2.1.2: No Keyboard Trap</li>
  <ul><li>Explanation: This success criterion is **less strict** than this rule. This is because this criterion allows for the use of non-standard keyboard navigation to exit a keyboard trap. Some of the failed examples may satisfy this success criterion.</li></ul>
</ul>
</blockquote>
  </aside>

A rule was designed to test an accessibility requirement and there exists a less strict accessibility requirement. In this scenario, the rule’s passed outcomes can determine that the less strict requirement is satisfied, and the rule’s failed outcomes may not determine that the less strict requirement is not satisfied. It is possible that the accessibility requirement may be satisfied when the rule’s outcome is failed. The less strict accessibility requirement is a secondary requirement.</li>

<aside class=example>
<header>Example: a rule that tests Enhanced Contrast</header>
<blockquote>This rule was designed to test Success Criterion 1.4.6 Contrast (Enhanced) (Level AAA). A less strict requirement, Success Criterion 1.4.3 Contrast Minimum (AA), will be satisfied when the rule outcomes are passed, and may be satisfied when the rule outcomes are failed. This rule’s mapping:
<ul>
<li>Conformance Requirement: Success Criterion 1.4.6 Contrast (Enhanced)</li>
<li>Secondary Requirement: Success Criterion 1.4.3 Contrast (Minimum)</li>
<ul><li>Explanation: This success criterion is **less strict** than this rule. This is because this criterion has a lower minimum contrast. Some of the failed examples may satisfy this success criterion.</li></ul>
</aside>

**Scenario 3**: the rule may impact the result of the accessibility requirement, but the rule is not intended to test the conformance of that requirement

A rule was designed to test an accessibility requirement and under certain conditions, other accessibility requirements apply. In this scenario, the other accessibility requirements are sometimes, but not always, satisfied or not satisfied because they are not always applicable in the rule. These other accessibility requirements are secondary requirements.

<aside class=example>
  <header>Example 1: a rule that tests if a link has a non-empty accessible name</header>
  <blockquote>This rule was designed to test links for accessibility requirements 4.1.2 Name, Role, Value (Level A), 2.4.4 Link Purpose (In Context) (Level A), 2.4.9 Link Purpose (Link Only) (Level AAA). In an image map, &lt;area&gt; elements that define regions within the map are both links and images. Testing for non-empty accessible name for &lt;area&gt; elements would map to another accessibility requirement 1.1.1 Non-text Content. Because the rule tests for all links and Success Criterion 1.1.1 only applies certain links, this rule’s mapping:
  <ul>
  <li>Conformance Requirement: Success Criteria 4.1.2 Name, Role, Value (Level A), 2.4.4 Link Purpose (In Context) (Level A), 2.4.9 Link Purpose (Link Only) (Level AAA)</li>
  <li>Secondary Requirement: Success Criterion 1.1.1 Non-text Content</li>
  <ul><li>Explanation: This success criterion is **related** to this rule. This is because HTML &lt;area&gt; elements are both links and non-text content. Most failed examples satisfy this success criterion. </li></ul>
  </ul>
  </blockquote>
</aside>

<aside class=example>
  <header>Example 2: A rule that tests that elements that have an explicit role also specify all required states and properties </header>
  <blockquote>This rule was designed to test a requirement of WAI-ARIA. In some cases, a failed outcome for this rule may result in WCAG 2 Success Criterion 4.1.2 Name, Role, Value being not satisfied, but not always. This rule’s mapping:
  <ul>
    <li>Conformance Requirement: WAI-ARIA 1.2</li>
    <li>Secondary Requirement: Success Criterion 4.1.2 Name, Role, Value
      <ul><li>Background Section: Success Criterion 4.1.2 Name, Role, Value is mapped as a Secondary requirement because it only applies to user controls. </li></ul>
    </li>
  </ul>
  </blockquote>
</aside>

### Mapping Outside WCAG ### {#mapping-outside-wcag}

ACT Rules can be used to test accessibility requirements that are not part of a W3C accessibility standard, such as accessibility requirements in [Hypertext Markup Language](https://www.w3.org/TR/html/) [[HTML]], or tests in a methodology like [RGAA 3 2016](https://disic.github.io/rgaa_referentiel_en/criteria.html). An ACT Rule <em class="rfc2119">must</em> indicate whether or not the [=accessibility requirement=] it maps to is required for conformance in its [=accessibility requirements document=]. Examples of accessibility requirements that are not required for conformance are WCAG sufficient techniques, or a company style guide that includes both requirements and optional "best practices". The distinction between what is required and what is optional has to be clear.

<aside class=example>
  <header>Example accessibility requirements mapping for a rule that tests that each `img` element has an `alt` attribute:</header>
  <blockquote><ul>
    <li>
      [Technique H37: Using alt attributes on img elements](https://www.w3.org/TR/WCAG20-TECHS/H37.html)
      <ul>
        <li>**Not required** for conformance to WCAG 2.0, 2.1, and 2.2 at any level</li>
        <li>Outcome mapping: <ul>
          <li>Any `failed` outcomes: not satisfied</li>
          <li>All `passed` outcomes: satisfied</li>
          <li>An `inapplicable` outcome: satisfied</li>
        </ul></li>
      </ul>
    </li>
    <li>
      [RGAA 3, Test 1.1.1: Does each image have a text alternative](https://disic.github.io/rgaa_referentiel_en/criteria.html#test-1-1-1)
      <ul>
        <li>**Required for conformance** to RGAA 3 level A and higher</li>
        <li>Outcome mapping: <ul>
          <li>Any `failed` outcomes: not satisfied</li>
          <li>All `passed` outcomes: satisfied</li>
          <li>An `inapplicable` outcome: satisfied</li>
        </ul></li>
      </ul>
    </li>
  </ul></blockquote>
</aside>


### Rules Without Accessibility Requirements ### {#rules-without-accessibility-requirements}

If the rule does not map to any [=accessibility requirement=], the accessibility requirement mapping will only contain the explainer that it is not required for conformance to the [=accessibility requirements document=]. This is common with atomic rules used in composite rules.

<aside class=example>
  <header>Example of a rule that tests if `role=alert` is used to satisfy [WCAG 2.2 success criterion 4.1.3 Status Messages](https://www.w3.org/TR/WCAG22/#status-messages):</header>
  <blockquote>
    <p>This rule is **not required** for conformance to WCAG 2.2 at any level.</p>
  </blockquote>
</aside>

If the `failed` [=outcome=] cannot be mapped to an [=accessibility requirement=], there <em class="rfc2119">must not</em> be an accessibility requirement in the accessibility requirements mapping. The optional [Background section](#background) could be used to list [=accessibility requirements documents=] when they are thematically related, but for which the rule is not a failure test.


### External Accessibility Requirements Mapping ### {#external-accessibility-requirements-mapping}

This section is *non-normative*.

While rules are often designed for one, or possibly a small collection of [=accessibility requirements documents=], it is likely that other accessibility requirements documents also map to those ACT Rules. For example, rules can be written for the [Web Content Accessibility Guidelines](https://www.w3.org/WAI/standards-guidelines/wcag/) [[WCAG22]], but many of those could also map to a company's internal accessibility policy. In such a scenario, an external accessibility requirements mapping could be created. An external accessibility requirements mapping amends the accessibility requirements mapping of an ACT rule by adding mapping to a different accessibility requirements document. An external accessibility requirements mapping avoids duplication of a rule for the sole purpose of changing the mapping.


Rule Input {#input}
-------------------

To evaluate content using an ACT Rule, the rule requires some information from the [=test subject=]. This is the input for the rule. What input is required is made explicit, to help testers understand what capabilities are required to use a rule. [=Atomic rules=] and [=composite rules=] have different input.

- Atomic rules have [Input Aspects](#input-aspects)
- Composite rules have [Input Rules](#input-rules)


### Input Aspects (Atomic rules only) ### {#input-aspects}

An input aspect is a distinct part of the [=test subject=]. Rendering a particular piece of content to an end user commonly involves different technologies, some or all of which are required as input for an [=atomic rule=]. For example, some rules need to operate directly on the [Hypertext Transfer Protocol](https://datatracker.ietf.org/doc/html/rfc7230) [[http11]] messages exchanged between a server and a client, while others need to operate on the [Document Object Model](https://dom.spec.whatwg.org) [[DOM]] tree exposed by a web browser.

[=Atomic rules=] <em class="rfc2119">must</em> list the aspects used as input for the [applicability](#applicability-atomic) and [expectations](#expectations-atomic) of the atomic rule. Rules can operate on several aspects simultaneously, such as both the HTTP messages and the DOM tree.

Some input aspects are well defined in a formal specification, such as HTTP messages, the DOM tree, and CSS styling [[css-2018]]. For these, a reference to the corresponding section in the [Common Input Aspects note](https://www.w3.org/TR/act-rules-aspects/) is sufficient as a description of the aspect. For input aspects that are not well defined, an ACT Rule <em class="rfc2119">must</em> include either a detailed description of the aspect in question, or a reference to a well defined description.

<aside class=example>
  <header>Example input aspects for a rule that checks if a transcript is available for videos:</header>
  <blockquote><ul>
    <li>DOM Tree</li>
    <li>CSS Styling</li>
    <li>Audio output</li>
    <li>Visual output</li>
  </ul></blockquote>
</aside>

<aside class=example>
  <header>Example input aspects for a rule that checks for use of (language specific) generic link texts like "click here" and "more":</header>
  <blockquote><ul>
    <li>DOM Tree</li>
    <li>CSS Styling</li>
    <li>Language</li>
  </ul></blockquote>
</aside>

 The method through which an input aspect is served is not relevant. For example a DOM tree can be served through HTTP as HTML, it can be bundled as several pages in an [EPUB publication](http://www.idpf.org/), or it can be inferred from a [JSX source file](https://facebook.github.io/jsx/). All rules that have only DOM tree as an input aspect can be applied to those technologies.


### Input Rules (Composite rules only) ### {#input-rules}

A [=composite rule=] uses [=outcomes=] from [=atomic rules=] and applies logic to them so that a single outcome can be determined for each [=test target=]. The [identifier](#rule-identifier) and [=descriptive title=] of all the atomic rules used in the [expectations](#expectations-composite) <em class="rfc2119">must</em> be listed in the composite rule. The input rules describe the input for composite rules, similar to how [input aspects](#input-aspects) describe the input for atomic rules.


Applicability {#applicability}
------------------------------

The applicability describes what parts of the [=test subject=] are tested.


### Applicability for Atomic Rules ### {#applicability-atomic}

The applicability section is a required part of an [=atomic rule=]. It <em class="rfc2119">must</em> contain a precise description of the parts of the [=test subject=] to which the rule applies. For example, specific nodes in the DOM [[DOM]] tree, or tags that are incorrectly closed in an HTML [[HTML]] document. These are known as the [=test targets=]. The applicability <em class="rfc2119">must</em> only use information made available through the listed [input aspects](#input-aspects) in the rule. No other information can be used in the applicability. 

Applicability <em class="rfc2119">must</em> be unambiguous so that the applicability can only be understood in one way. For example, concepts like headings and images are ambiguous since they could refer to the tag name, the semantic role, or the element’s purpose on the web page. Conversely, a rule that specifically only applies to elements with a heading tag would satisfy the unambiguous requirement. 

Additionally, the applicability <em class="rfc2119">should</em> be described objectively and in plain language. An objective description is one that can be resolved without uncertainty, in a given technology. Examples of objective properties in HTML are tag names, their computed role, and the distance between two elements.

Subjective properties are concepts like decorative, navigation mechanism, and pre-recorded that may be defined in a variety of ways, often relying on human judgement. When possible, avoid subjectivity since it can easily be misunderstood. In cases where it is impossible to objectively define the applicability, the use of a subjective description in the applicability is acceptable. When crafting a subjective applicability, if possible, split the objective and subjective parts of the applicability into separate rules. This will ensure the designed rule meets the atomic rule requirement of testing a single condition. An example would be testing headings with correct semantic markup in a different rule from those without semantic markup.

Definitions can be put in the rule [glossary](#glossary), or they can be defined in the section where they are used.

<aside class=example>
  <header>Example objective applicability of an atomic rule testing [WCAG 2.2 success criterion 1.4.2 Audio Control](https://www.w3.org/WAI/WCAG22/quickref/#audio-control):</header>
  <blockquote>
    <p>Applicability: Each `video` or `audio` element with the `autoplay` attribute, as well as each `object` element that is used for automatically playing video or audio when the web page loads.</p>
    <p>Note: A web page is considered "loaded" when the `document.readyState` is set to `complete`.</p>
  </blockquote>
</aside>

<aside class=example>
  <header>Example objective applicability of a rule with the page as a test target</header>
  <blockquote>
    <p>Applicability: The rule applies to any page where the document element is an `html` element, and the `html` element is rendered in a top-level context (i.e. the `html` element is not embedded in another page, such as through `iframe` or `object` elements). </p>
  </blockquote>
</aside>

<aside class=example>
  <header>Example objective applicability of a rule with a DOM attribute as a test target</header>
  <blockquote>
    <p>Applicability: The rule applies to any `role` attribute that is specified on an HTML or SVG element.</p>
  </blockquote>
</aside>

<aside class=example>
  <header>Example subjective applicability for a rule testing that elements styled as a heading use correct heading markup. This rule applicability cannot be written objectively since "styled as a heading" is subjective and depends on the context of the page.</header>
  <blockquote>
    <p>Applicability: The rule applies to any HTML element that is styled as a heading. Elements that are styled as a heading may include features such as a larger font-size than nearby text, bolding or changing of the font, or the use of whitespace or shapes that visually distinguish the element text.</p>
  </blockquote>
</aside>

<aside class=example>
  <header><strong>Non-conforming Example:</strong>This example demonstrates an applicability that attempts to be subjective, but does not meet the "must be unambiguous" requirement. For example, non-text content could refer to images, interactive elements, or even a text smiling face emoji using a colon and parathesis like ":)". Due to the ambiguity in the applicability it is impossible to tell.</header>
  <blockquote>
    <p>Applicability: This rule applies to any non-text content.</p>
  </blockquote>
</aside>

#### Applicability Type Designation (optional) {#applicability-type-designation-atomic-optional}

Rules can optionally include an applicability type identifier signifying whether the rule contains an objective or a subjective applicability. This identifier is intended to benefit rule readers and implementers by clearly stating the rule author's intention of the applicability and reducing confusion due to different reader and implementer interpretations.

### Applicability for Composite Rules ### {#applicability-composite}

The applicability of a composite rule is defined as the union of all applicability definitions from the rules listed in the [input rules](#input-rules). Rule authors <em class="rfc2119">may</em> omit a description of the applicability for composite rules. This can be useful if it is difficult to express the combined applicability in plain language. If the composite rule includes applicability, it <em class="rfc2119">must</em> be the union of all the applicability in the [input rules](#input-rules).

Note that input rules in a composite rule <em class="rfc2119">may</em> have different applicability. Because of this, not every test target applicable within the composite rule is tested by every input rule.

<aside class=example>
  <header>Example of the union of applicability of input rules in a composite rule:</header>
  <blockquote>
    <p>**Input applicability:**</p>
    <ul>
      <li>**Input Rule 1:** All `img` element <em>with</em> an `alt` attribute</li>
      <li>**Input Rule 2:** All `img` element <em>without</em> an `alt` attribute</li>
    </ul>
    <p>**Combined applicability:**</p>
    <p>All `img` elements.</p>
  </blockquote>
</aside>

#### Applicability Type Designation (optional) {#applicability-type-designation-composite-optional}

Composite rules can optionally include an applicability type identifier signifying whether the rule contains an objective or a subjective applicability. The applicability type of a composite rule is calculated as subjective if any of the input rules contain a subjective applicability or objective otherwise.


Expectations {#expectations}
----------------------------

An ACT Rule <em class="rfc2119">must</em> contain one or more expectations. The expectations describe what the requirements are for the [=test targets=] derived from the [applicability](#applicability). An expectation is an assertion about a [=test target=]. When a test target meets all expectations, the test target `passed` the rule. If the test target does not meet all expectations, the test target `failed` the rule. If there are no test targets, the [=outcome=] for the rule is `inapplicable`.

Each expectation <em class="rfc2119">must</em> be distinct, unambiguous, and be written in plain language.


### Expectations for Atomic Rules ### {#expectations-atomic}

All expectations of an [=atomic rule=] <em class="rfc2119">must</em> describe the logic that is used to determine a single `passed` or `failed` [=outcome=] for a [=test target=]. The expectation <em class="rfc2119">must</em> only use information available in the [input aspects](#input-aspects), from the applicability, and other expectations of the same rule. No other information can be used in the expectation. So for instance, an expectation could be "Expectation 1 is true and ...", but it can't be "Rule XYZ passed and ...". This ensures that atomic rules are encapsulated.

<aside class=example>
  <header>Example expectations of a rule to test for accessible names of HTML `input` elements:</header>
  <blockquote><ol>
    <li>Each HTML `input` element has an accessible name (as described in [Accessible Name and Description: Computation and API Mappings 1.1](https://www.w3.org/TR/accname-1.1/#mapping_additional_nd_te)). [[accname-aam-1.1]]</li>
    <li>The accessible name describes the purpose of each HTML `input` element.</li>
  </ol></blockquote>
</aside>

<aside class=example>
  <header>Example expectation of a rule to test if a `role` attribute is valid:</header>
  <blockquote><ol>
    <li>Each `role` attribute has a value that corresponds to a non-abstract [WAI-ARIA 1.2](https://www.w3.org/TR/wai-aria/) role.</li>
  </ol></blockquote>
</aside>

<div class="note">
  <p>**Note:** Sometimes there is the need for rules with more complex aggregation, for example that X% of all images on a web page are expected to have text alternatives. In this case, the page itself needs to become the test target. The expectation would then be "The test target (the page) has a text alternative for X% of all img elements". The logic for calculating the expectations in such rules is left to the implementations, to avoid over-complexity of this rules format.</p>
</div>

### Expectations for Composite Rules ### {#expectations-composite}

All expectations of a [=composite rule=] <em class="rfc2119">must</em> describe the logic that is used to determine a single `passed` or `failed` [=outcome=] for a [=test target=], based on the outcomes of rules in its [input rules](#input-rules). A composite rule expectation <em class="rfc2119">must not</em> use information from [input aspects](#input-aspects). The outcome for a composite rule is `inapplicable` when all input rules are inapplicable.

<aside class="example">
  <header>Example expectations for the composite rule 'video elements have an audio description or media alternative' ([WCAG 2.2 success criterion 1.2.3 Audio Description or Media Alternative](https://www.w3.org/WAI/WCAG22/quickref/#audio-description-or-media-alternative-prerecorded)):</header>
  <blockquote><p>Each HTML `video` element meets all expectations from at least one of the following rules:</p>
  <ul>
    <li>video elements have a transcript</li>
    <li>video elements have an audio description</li>
    <li>video elements have a description track</li>
  </ul></blockquote>
</aside>

<aside class="example">
  <header>Example expectations for a composite rule that checks if a mechanism is available to escape a keyboard trap; Either through a standard mechanism, or one for which instructions are available:</header>
  <blockquote><p>For each focusable element, the outcome of one of the following rules is `passed`:</p>
  <ul>
    <li>Keyboard trap with standard escape mechanism</li>
    <li>Keyboard trap with escape instructions</li>
  </ul></blockquote>
</aside>

Background {#background}
-----------------------------------

An ACT Rule's Background <em class="rfc2119">must</em> contain the Assumptions and Accessibility Support sections. Additional information <em class="rfc2119">may</em> be included about the development of the rule, or references to relevant reading in Other Resources, or Related Rules. Whenever a reference is included in the rule, the relationship to the relevant reading can be specified. Examples of relevant background references for a rule for a [Web Content Accessibility Guidelines](https://www.w3.org/WAI/standards-guidelines/wcag/) [[WCAG22]] success criterion could be [WCAG 2.2 Understanding documents](https://www.w3.org/WAI/WCAG22/Understanding/), [WCAG 2.2 Techniques](https://www.w3.org/WAI/WCAG22/Techniques/), or [WAI-ARIA 1.2](https://www.w3.org/TR/wai-aria/), CSS [[css-2018]], or HTML [[HTML]] specifications.


### Assumptions ### {#assumptions}

An ACT Rule <em class="rfc2119">must</em> list any known assumptions, limitations or any exceptions for the evaluation, the test environment, technologies being used or the subject being tested. For example, a rule that would partially test [WCAG 2.2 success criterion 1.4.3 Contrast (Minimum)](https://www.w3.org/WAI/WCAG22/quickref/#contrast-minimum) based on the inspection of CSS properties could state that it is only applicable to HTML text content styleable with CSS, and that the rule does not support images of text.

Sometimes there are multiple plausible ways that an accessibility requirement can be interpreted. For instance, it is not immediately obvious if emoji characters are "text" or "non-text content" in the [Web Content Accessibility Guidelines](https://www.w3.org/WAI/standards-guidelines/wcag/) [[WCAG22]]. Whatever the interpretation is, this <em class="rfc2119">must</em> be documented in the rule.

While the assumptions <em class="rfc2119">must</em> be included in the ACT Rule, it <em class="rfc2119">may</em> be empty when there are no known assumptions, limitations or exceptions.


### Accessibility Support ### {#accessibility-support}

Content can be designed to rely on the support for particular accessibility features by different assistive technologies and user agents. For example, content using a particular [WAI-ARIA 1.2](https://www.w3.org/TR/wai-aria/) feature relies on that feature to be supported by assistive technologies and user agents. This content would not work for assistive technologies and user agents that do not support WAI-ARIA. See the WCAG definition for [accessibility supported](https://www.w3.org/TR/WCAG22/#dfn-accessibility-supported) use of a web technology.

An ACT Rule <em class="rfc2119">must</em> include known limitations on accessibility support.

<aside class=example>
  <header>Example of a rule that checks if `aria-errormessage` is used to satisfy [WCAG 2.2 success criterion 4.1.3 Status messages](https://www.w3.org/TR/WCAG22/#status-messages):</header>
  <blockquote><p>
    The `aria-errormessage` property is known to have limited support with several major screen readers. This method cannot be relied on for support. Alternatives, like using live regions, could serve as fallback. (January 2019)
  </p></blockquote>
</aside>

While an accessibility support section <em class="rfc2119">must</em> be included in the ACT Rule, it <em class="rfc2119">may</em> be empty when there are no known accessibility support issues.

<div class=note>
  <p>**Note:** The Website Accessibility Conformance Evaluation Methodology (WCAG-EM) provides guidance on defining an [accessibility support baseline](https://www.w3.org/TR/WCAG-EM/#step1c) for test scenarios, which can help users of ACT Rules to select the appropriate rules for their own circumstance.</p>
</div>


### Related Rules (optional) ### {#related-rules}

Related rules are other rules that test the same accessibility requirement. For example, two related rules of a composite rule can be the two atomic rules that contribute to its outcome. Similarly, each atomic rule in this example can list the other atomic rule and the composite rule as its related rules.


### Other Resources (optional) ### {#other-resources}

Whenever a resource is included in the rule, the relationship to the relevant reading can be specified. Examples of relevant background references for a rule for a [Web Content Accessibility Guidelines](https://www.w3.org/WAI/standards-guidelines/wcag/) [[WCAG22]] success criterion could be [WCAG 2.2 Understanding documents](https://www.w3.org/WAI/WCAG22/Understanding/), [WCAG 2.2 Techniques](https://www.w3.org/WAI/WCAG22/Techniques/), or [WAI-ARIA 1.2](https://www.w3.org/TR/wai-aria/), CSS [[css-2018]], or HTML [[HTML]] specifications.


Test Cases {#test-cases}
------------------------

Test cases are (snippets of) content that can be used to validate the implementation of ACT Rules. Each rule <em class="rfc2119">must</em> have one or more test cases for `passed`, `failed`, and `inapplicable` [=outcomes=]. A test case consists of two pieces of data, a snippet of each [input aspect](#input-aspects) for a rule, and the expected outcome for that rule. Test cases serve two functions, firstly as example scenarios for readers to understand when the outcome of a rule is `passed`, `failed`, or `inapplicable`. It also serves developers and users of accessibility testing tools and methodologies to validate that a rule is correctly implemented.

Each`passed` and `inapplicable` test case of an ACT Rule <em class="rfc2119">must</em> satisfy all the rule's [=conformance requirements=]. For each `failed` test case, all conformance requirements <em class="rfc2119">must</em> be *not satisfied*.

<aside class="example">
  <header>Example of HTML test cases for a rule that checks if `img` elements have a text alternative:</header>
  <blockquote>
    <p>Example of a `passed` outcome:</p>
    ```html
<img alt="W3C Logo" src="image/w3c.png">
    ```
    <p>Example of a `failed` outcome:</p>
    ```html
<img src="image/w3c.png">
    ```
    <p>Example of an `inapplicable` outcome:</p>
    ```html
<input type="image" alt="W3C Logo" src="image/w3c.png">
    ```
  </blockquote>
</aside>


Rule Versions {#rule-versions}
------------------------

It is important to keep track of versions of ACT Rules so that users of the rules can understand if changes in test results are due to changes in the rules used when performing the tests, or from changes in the content itself. All previous versions of an ACT Rule <em class="rfc2119">must</em> be recorded either in the rule document or referenced from it.

This section was previously named "Change Log". Either section name is acceptable.


ACT Rules Format Version {#act-rules-format-version}
-------------------------------------------

An ACT Rule is written for a specific version of the ACT Rules Format. Each ACT Rule <em class="rfc2119">must</em> indicate the version of the ACT Rules Format for which it is written. 

Glossary {#glossary}
--------------------

ACT Rules <em class="rfc2119">must</em> have a glossary section. The glossary <em class="rfc2119">must</em> contain the [=outcome=] definition, as well as any definitions used in [applicability](#applicability) and [expectations](#expectations) sections in the rule. Since changes to the definition change the rule, those definitions cannot be maintained independently of the rule. If a shared glossary is used for rules, any definition changes <em class="rfc2119">must</em> result in a new [rule version](#rule-versions) of all rules that use that definition.


Issues List (optional) {#issues-list}
-------------------------------------

An ACT Rule <em class="rfc2119">may</em> include a list or a reference to a list of any known issues. The issues list would be used to record cases where an [=outcome=] of an ACT Rule was `failed` where it ought to have been `passed` or `inapplicable`, or vice versa. There are several reasons why this might occur. See [rule accuracy](#rule-accuracy) for more information.

The issues list serves two purposes. For users of ACT Rules, the issues list gives insight into why an inaccurate result occurred, as well as provide confidence in the result of that rule. For the designer of the rule, the issues list is also useful to plan future updates to the rule. In a new version of the rule, resolved issues would be moved to the change log.

  
Implementations (optional) {#implementations}
--------------------------------

An ACT Rule <em class="rfc2119">may</em> contain a list of [=implementations=], where each [=implementation=] has one or more [=checks=] that are consistent or partially consistent with that rule. An implementation is an accessibility test methodology or test tool that uses [=checks=] to compute [=outcomes=] indicating whether an [=accessibility requirement=] could be satisfied. These checks can be fully automated, completely manual, or some combination of the two.

[=Checks=] are not required to have a one-to-one mapping to an ACT Rule. A single check can be consistent with multiple ACT Rules or a [set of checks](#impl-partial-consistency) can together be consistent with a single ACT Rule.

For each implementation, information such as the following could be included:

- Name, title or identifier of any consistent or partially consistent checks
- [Consistency](#impl-consistency)
- [test modes](https://www.w3.org/TR/EARL10-Schema/#TestMode) of the checks (e.g. automatic, manual, semiAuto)
- Name of implementation
- Version used in testing consistency and coverage
- Name of the vendor

### Consistency ### {#impl-consistency}

Consistency describes how well a [=check=] is aligned with the intent of an ACT Rule. If consistency is included in an ACT Rule it <em class="rfc2119">must</em> be determined as defined in this section. A consistent check of an ACT Rule is one that can be used to identify some or all non-conformance issues as described by the rule. A check is <dfn>consistent</dfn> when all the following are true:

1. <dfn>True positives</dfn>: There are no inconsistencies with the test cases, meaning:
    1. The `passed` and `inapplicable` test cases are **not** reported as `failed`; and
    2. The `failed` test cases are **not** reported as `passed` or `inapplicable`; and

2. <dfn>Completeness</dfn>: There are no gaps in coverage, meaning: 
    1. None of the [=check=]'s outcomes are `untested`; and
    2. At least one of the `failed` test cases is reported as `failed`; and

3. <dfn>Rule Mapping</dfn>: The accessibility requirements are reported consistently, meaning:
    1. The [=check=] is reported as testing for all the rule's [=conformance requirements=], except requirements of a level or standard not supported by the implementation; and
    2. All accessibility requirements the rule reports to be a part of are either [=conformance requirements=] or [=secondary requirements=], except for requirements of [=accessibility requirements documents=] not mentioned in the rule.

When a [=check=] reports more than one outcomes for a test case, the first outcome that appears on the following ordered list is considered for determining consistency:

1. `failed`
2. `untested`
3. `cantTell`
4. `passed`
5. `inapplicable`

### Partial Consistency ### {#impl-partial-consistency}

A [=check=] that is not [=consistent=] is considered <dfn>partially consistent</dfn> if the [=true positive=] condition is true and not all outcomes it reports for the rule's test cases are `cantTell` or `untested`.

### Consistency with multiple checks ### {#impl-multi-check}

An [=implementation=] can include [=checks=] that test only parts of a single ACT Rule. The combination of those checks can be consistent if all parts of the ACT Rule are covered. The consistency of a <dfn>set of checks</dfn> can be determined by treating all [=partially consistent=] checks as though they were a single check.

A [=set of checks=] is [=consistent=] with an ACT Rule if it meets all requirements for a [=consistent|consistent check=]. The [=outcomes=] for this set of checks is a list of all outcomes of checks that are partially consistent with the ACT Rule. The accessibility requirements of this set of checks is a list of all accessibility requirements of checks that are partially consistent with the ACT rule.

<aside class=example>
  <header>Example of a consistent set of checks:</header>
  <blockquote>
    <p>An ACT Rule checks that all native button elements, and elements with a role="button" have an accessible name. The ACT Rule has test cases including both native buttons and role="button" elements.</p>
    <p>The ACME Conformance Tool has a check for native button elements. This check passes all native buttons with an accessible name, it fails all native buttons without an accessible name, and gives inapplicable for pages with only elements with role="button". Because it reports inapplicable for some of the failed test cases of the ACT Rule, this check is partially consistent.
    <p>ACME Conformance Tool has a second check for elements with role="button". This works similarly to the previous check, except it passes and fails role="button" elements, and is inapplicable for pages with only native buttons. This check is also partially consistent. The combination of these two checks is consistent though, because all failed test cases of the ACT Rule are failed by one of the checks.</p>
  </blockquote>
</aside>


Acknowledgments (optional) {#acknowledgments}
-----------------------------------------------

An ACT Rule <em class="rfc2119">may</em> contain acknowledgments. This can include, but is not limited to:
* List of rule authors
* List of rule reviewers/contributors
* Funding or other support


Rule Accuracy {#rule-accuracy}
=========================

This section is *non-normative*.

While [test cases](#test-cases) can be used to determine if an ACT Rule was correctly implemented, they do not guarantee that implementations will never produce incorrect results. When writing ACT Rules, it is almost inevitable that edge cases will be overlooked. Technologies are always evolving, and content authors are constantly coming up with new and unexpected ways to use them. Some examples of causes for inaccuracy are:

- [Assumptions](#assumptions) were made about the test subject that turned out to be untrue
- Technologies were used in an unusual and difficult to predict manner
- Technologies have changes, or aspects of the technologies were overlooked
- The accessibility requirement was not correctly interpreted

There are two types of inaccuracies that can produce incorrect results. Inaccuracies in the **implementation** can be addressed with test cases, but inaccuracies in the **ACT Rule itself** cannot. After all, rule inaccuracies come from the rule author being unaware of a particular edge case.

When a test result incorrectly indicates non-conformance to an accessibility requirement, this is known as a false positive. Opposite, when a rule incorrectly indicates conformance, this is a false negative. A percentage of false positives and false negatives can be calculated by comparing it to results from an accessibility audit:

- **False positives:** This is the percentage of [=test targets=], that were `failed` by the rule, but satisfy the [=accessibility requirements=].

- **False negatives:** This is the percentage of [=test targets=], that were `passed` by the rule, but do not satisfy the [=accessibility requirements=].

The ever present possibility of false positives and false negatives with ACT Rules means they will likely require ongoing maintenance. Designing a process for maintaining ACT Rules is outside the scope of the ACT Rules Format, which is limited to the rules themselves. Nevertheless, it is suggested that rule authors work out a process for maintaining their rules.


Harmonization {#harmonization}
==============================

This section is *non-normative*.

While the ACT Rules Format is designed to stimulate harmonization, there are no direct requirement in the ACT Rules Format that prevent a rule author from writing rules inconsistent with already established ACT Rules. Neither are there requirements for ACT Rules to have a certain number of implementations, or to have a certain level of accuracy. This allows quality requirements to be different for different rulesets, and allows them to develop over time.

Harmonization occurs when a group of rule implementors collectively accept the validity of an ACT Rule. For example, a community group of accessibility testing tool vendors could declare they have harmonized on a particular set of ACT Rules. Such a group can set acceptance criteria for rules, and have quality requirements that go beyond the ACT Rules Format.

<aside class=example>
  <header>Example of acceptance criteria for a group working on EPUB rules:</header>
  <blockquote><ul>
    <li>An ACT EPUB Rule is harmonized when it is approved by members of 3 organizations, AND</li>
    <li>An ACT EPUB Rule is harmonized when it has 2 independent implementations</li>
  </ul></blockquote>
</aside>

An example of such a process is the [WCAG ACT Review Process](https://w3c.github.io/wcag-act/wcag-ruleset-review-process).


Definitions {#definitions}
==========================

<dl>
  <dt><dfn>Accessibility requirement</dfn></dt>
  <dd>
    <p>An accessibility requirement is a requirement aimed at improving access for people with disabilities to an ICT product. In the context of ACT rules mapping, a requirement can be compulsory or advisory. When compulsory, it has to be satisfied in order to conform to a standard, or to comply with a contract, policy or regulation. When advisory, it is recommended, but not satisfying it does not lead to non-conformance or non-compliance.</p>
    <p>A common example of accessibility requirements are the WCAG success criteria. There are other standards, including W3C standards, that have recommendations for accessibility, such as WAI-ARIA and HTML. Accessibility requirements are also often found in company policies, regional standards or in legislation.</p>
  </dd>

  <dt><dfn>Accessibility requirements document</dfn></dt>
  <dd>
    <p>A document, such as a standard, contract, policy or regulation, that includes [=accessibility requirements=]. For example, WCAG 2.2, WAI-ARIA 1.2, HTML 5.2, EPUB Accessibility 1.0, BBC HTML Accessibility Standards v2.0</p>
  </dd>

  <dt><dfn>Check</dfn></dt>
  <dd>
    <p>A procedure resulting in one or more [=outcomes=] when used to evaluate the accessibility of a web page or other test subject. The procedure can be a step by step description of how to manually perform a test, a fully automated test, or some combination of manual and automated testing.</p>
  </dd>

  <dt><dfn>Implementation</dfn></dt>
  <dd>
    <p>An accessibility test methodology or test tool, containing a set of [=checks=] which can be used to determine (non-)conformance of [=accessibility requirements=].</p>
  </dd>

  <dt><dfn>Outcome</dfn></dt>
  <dd>
    <p>A conclusion that comes from evaluating an ACT Rule on a [=test subject=] or one of its constituent [=test target=]. An outcome can be one of the five following types:</p>
    <ul>
      <li>**inapplicable:** No part of the test subject matches the applicability</li>
      <li>**passed:** A [=test target=] meets all expectations</li>
      <li>**failed:** A [=test target=] does not meet all expectations</li>
      <li>**cantTell:** Whether the rule is applicable, or not all expectations were met could not be fully determined by the tester.</li>
      <li>**Untested:** The tester has not attempted to evaluate the test subject.</li>
    </ul>
    <div class="note">
      <p>**Note:** A rule has one `passed` or `failed` outcome for every [=test target=]. When a tester evaluates a test target it can also be reported as `cantTell` if the rule cannot be tested in its entirety. For example, when applicability was automated, but the expectations have to be evaluated manually.</p>
      <p>When there are no test targets the rule has one `inapplicable` outcome. If the tester is unable to determine whether there are test targets there will be one `cantTell` outcome. And when no evaluation has occurred the test target has one `untested` outcome. This means that each [=test subject=] always has one or more outcomes.</p>
      <p>Outcomes used in ACT Rules can be expressed using the [outcome property](https://www.w3.org/TR/EARL10-Schema/#outcome) of the [[EARL10-Schema]].</p>
    </div>
  </dd>

  <dt><dfn>Test Subject</dfn></dt>
  <dd>
    <p>A resource or collection of resources that can be evaluated by an ACT Rule.</p>
    <aside class=example>
      <header>Example of test subjects:</header>
      <blockquote><ul>
        <li>An HTML page, including all embedded scripts, style and images</li>
        <li>An EPUB publication</li>
        <li>A web component file</li>
      </ul></blockquote>
    </aside>
    <div class=note>
      <p>**Note:** Implementers using the [[EARL10-Schema]] can express the test subject with the [subject property](https://www.w3.org/TR/EARL10-Schema/#subject)</p>
    </div>
  </dd>

  <dt><dfn>Test Target</dfn></dt>
  <dd>
    <p>A distinct part of the [=test subject=], as defined by the [applicability](#applicability).</p>
    <aside class=example>
      <header>Example of test targets:</header>
      <blockquote><ul>
        <li>Nodes within an HTML page</li>
        <li>A period of time within a video</li>
        <li>A range of characters within a text document</li>
      </ul></blockquote>
    </aside>
    <div class=note>
      <p>**Note:** Implementers using the [[EARL10-Schema]] can express the test target with the [pointer property](https://www.w3.org/TR/EARL10-Schema/#pointer)</p>
    </div>
  </dd>
</dl>


Appendix 1: Expressing ACT Rule results with JSON-LD and EARL {#appendix-data-example}
=================================================================================

This section is *non-normative*.

This section provides examples of expressing results from carrying out ACT Rules using EARL and JSON-LD (See [Evaluation and Report Language](https://www.w3.org/WAI/standards-guidelines/earl/) and [A JSON-based Serialization for Linked Data (JSON-LD)](https://www.w3.org/TR/json-ld/)). More examples and background is provided on the [JSON-LD serialization of EARL](https://github.com/w3c/earl) GitHub repository.

Examples in this section include:

- Example 1: Minimal outcome from one assertion
- Example 2: Results from more than one assertion
- Example 3: Aggregating based on requirement
- Example 4: Aggregating based on 'Test Subject'
- Example 5: Assumed context for this section

**Example 1:** Minimal outcome for one assertion

```javascript
{
  "@context": "context.json",
  "@type": "Assertion",
  "assertedBy": "https://example.org/MyTool",
  "subject": "https://example.org/page1.html",
  "test": "ACT-CG:rules/23a2a8",
  "result": {
    "outcome": "earl:failed",
    "pointer": "html > body > h1:first-child"
  }
}
```

**Example 2:** Results for more than one assertion

```javascript
{
  "@context": "context.json",
  "@graph": [{
    "@type": "Assertion",
    "assertedBy": "https://example.org/MyTool",
    "subject": "https://example.org/page1.html",
    "test": "ACT-CG:rules/23a2a8",
    "result": {
      "outcome": "earl:failed",
      "pointer": "html > body > h1:first-child"
    }
  }, {
    "@type": "Assertion",
    "assertedBy": "https://example.org/AnotherTool",
    "subject": "https://example.org/page1.html",
    "test": "ACT-CG:rules/23a2a8",
    "result": {
      "outcome": "earl:passed",
      "pointer": "html > body > h1:nth-child(2)"
    }
  }]
}
```

**Example 3:** Aggregating based on requirement (eg. WCAG Success Criteria)

```javascript
{
  "@context": "context.json",
  "@type": "Assertion",
  "assertedBy": "https://example.org/MyTool",
  "subject": "https://example.org/page1.html",
  "test": {
    "@type": "earl:TestRequirement",
    "@id": "WCAG22:non-text-content"
  },
  "result": {
    "outcome": "earl:failed",
    "source": [{
      "test": "ACT-CG:rules/23a2a8",
      "result": {
        "outcome": "earl:failed",
        "pointer": "html > body > h1:first-child"
      }
    }, {
      "test": "ACT-RULES-CG:rules/23a2a8",
      "result" : {
        "outcome": "earl:passed",
        "pointer": "html > body > h1:nth-child(2)"
      }
    }]
  }
}
```

**Example 4:** Aggregating based on 'Test Subject' (eg. for a website)

```javascript
{
  "@context": "context.json",
  "@type": "Assertion",
  "assertedBy": {
    "@type": "Organization",
    "@id": "_:myOrg",
    "title": "My Organization",
    "description" : "Accessibility testing service",
    "homepage" : "http://example.org/myOrg/"
  },
  "subject": {
    "@type": ["WebSite", "TestSubject"],
    "@id": "https://example.org/"
  },
  "test": {
    "@type": "earl:TestRequirement",
    "@id": "http://www.w3.org/WAI/WCAG2A-Conformance"
  },
  "result": {
    "outcome": "earl:failed",
    "source": [{
      "test": {
        "@type": "earl:TestRequirement",
        "@id": "WCAG22:non-text-content"
      },
      "result": {
        "outcome": "earl:failed",
        "source": [ … ]
      }
    }, {
      "test": {
        "@type": "earl:TestRequirement",
        "@id": "WCAG22:audio-only-and-video-only-prerecorded"
      },
      "result": {
        "outcome": "earl:passed",
        "source": [ … ]
      }
    }, {
      "test": {
        "@type": "earl:TestRequirement",
        "@id": "WCAG22:captions-prerecorded"
      },
      "result" : {
        "outcome": "earl:passed",
        "source": [ … ]
      }
    }, … ]
  }
}
```

**Example 5:** Assumed context for this section

```javascript
{
  "@vocab": "http://www.w3.org/ns/earl#",

  "cnt": "http://www.w3.org/2011/content#",
  "dct": "http://purl.org/dc/terms/",
  "earl": "http://www.w3.org/ns/earl#",
  "foaf": "http://xmlns.com/foaf/0.1/",
  "htp": "http://www.w3.org/2011/http#",
  "ptr": "https://www.w3.org/2009/pointers#",
  "schema": "http://schema.org/",
  "xsd": "https://www.w3.org/2001/XMLSchema#",

  "WCAG20": "https://www.w3.org/TR/WCAG20#",
  "WCAG22": "https://www.w3.org/TR/WCAG22#",
  "ACT-RULES-CG": "https://act-rules.github.io/",

  "WebSite": "schema:WebSite",
  "WebPage": "schema:WebPage",

  "title": "dct:title",
  "description": "dct:description",
  "date": "dct:date",
  "hasVersion": "dct:hasVesion", 
  "isPartOf": "dct:isPartOf", 
  "hasPart": "dct:hasPart",
  "source": "dct:source",

  "Agent": "foaf:Agent",
  "Person": "foaf:Person",
  "Organization": "foaf:Organization",
  "Group": "foaf:Group",
  "Document": "foaf:Document",
  "name": "foaf:name",
  "firstName": "foaf:firstName",
  "surname": "foaf:surname",
  "mbox": "foaf:mbox",
  "mbox_sha1sum": "foaf:mbox_sha1sum",
  "member": "foaf:member",
  "homepage": "foaf:homepage",

  "assertedBy": { "@type": "@id" },
  "subject": { "@type": "@id" },
  "test": { "@type": "@id" },
  "mode": { "@type": "@id" },
  "outcome": { "@type": "@id" },
  "pointer": {
    "@id": "earl:pointer",
    "@type": "ptr:CSSSelectorPointer"
  }
}
```

Appendix 2: Acknowledgments {#Acknowledgments}
===========================

This section is *non-normative*.


Participants of the AG WG active in the development of this document {#participants}
--------------------------------------------------------------------

Shadi Abou-Zahra, Trevor Bostic, Romain Deltour, Kathy Eng, Wilco Fiers, Alistair Garrison, Kasper Isager, Maureen Kraft, Mary Jo Mueller, Jey Nandakumar, Charu Pandhi, Stein Erik Skotkjerra, Anne Thyme Nørregaard, Kathleen Wahlbin


Enabling funders {#enabling-funders}
----------------

This publication has been developed with support from the [WAI-Tools Project](https://www.w3.org/WAI/about/projects/wai-tools/), co-funded by the European Commission (EC) under the Horizon 2020 Program (Grant Agreement 780057). The content of this publication does not necessarily reflect the views or policies of the European Commission (EC) or any of the European Union (EU) Member States.


Appendix 3: Change History {#Change_History}
==========================

This section is *non-normative*.

<ul>
  <li><strong>4. Rule Structure</strong> Accessibility Support and Assumptions section are now subsections of Background.</li>
  <li><strong>4.4. Accessibility Requirements Mapping</strong> Accessibility requirements are now categorized as either Conformance requirements or Secondary requirements.</li>
  <li><strong>4.6 Applicability</strong> Subjective applicability statements are now allowed. Objective and plain language requirements have been reduced to <em class="rfc2119">should</em> instead of <em class="rfc2119">must</em>.</li>
  <li><strong>4.8. Background</strong> New optional Related Rules and Other Resources subsections have been added</li>
  <li><strong>4.10. Change Log</strong> The Change Log has been renamed to Rule Versions</li>
  <li><strong>4.11 ACT Rules Format Version</strong> New requirement to identify ACT Rules Format version compatibility</li>
  <li><strong>4.14. Implementations</strong> New section has been added, including a method for determining consistency with ACT Rules</li>
  <li><strong>7. Definitions</strong> The Outcome definition is updated to include cantTell and untested</li>
  <li><strong>Overall</strong> Links to W3C specifications are updated to their latest recommendation</li>
</ul>

All changes from the previous published version can be viewed using the [Editor's draft to Rules Format 1.0 Recommendation diff link](https://services.w3.org/htmldiff?doc1=https://www.w3.org/TR/act-rules-format/&doc2=https://w3c.github.io/wcag-act/act-rules-format.html)
